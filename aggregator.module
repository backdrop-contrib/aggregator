<?php

/**
 * @file
 * Used to aggregate syndicated content (RSS, RDF, and Atom).
 */

/**
 * Denotes that a feed's items should never expire.
 */
define('AGGREGATOR_CLEAR_NEVER', 0);

/**
* Implements hook_config_info().
*/
function aggregator_config_info() {
  $prefixes['aggregator.settings'] = array(
    'label' => t('Aggregator module settings'),
    'group' => t('Aggregator'),
  );
  return $prefixes;
}

/**
 * Implements hook_autoload_info().
 */
function aggregator_autoload_info() {
  return array(
    'views_handler_argument_aggregator_category_cid' => 'views/views_handler_argument_aggregator_category_cid.inc',
    'views_handler_argument_aggregator_fid' => 'views/views_handler_argument_aggregator_fid.inc',
    'views_handler_argument_aggregator_iid' => 'views/views_handler_argument_aggregator_iid.inc',
    'views_handler_field_aggregator_category' => 'views/views_handler_field_aggregator_category.inc',
    'views_handler_field_aggregator_title_link' => 'views/views_handler_field_aggregator_title_link.inc',
    'views_handler_field_aggregator_xss' => 'views/views_handler_field_aggregator_xss.inc',
    'views_handler_filter_aggregator_category_cid' => 'views/views_handler_filter_aggregator_category_cid.inc',
    'views_plugin_row_aggregator_rss' => 'views/views_plugin_row_aggregator_rss.inc',
    // => 'views/views_handler_field_aggregator_item_description.inc',
  );
}

/**
 * Implements hook_views_api().
 */
function aggregator_views_api() {
  return array(
    'api' => 3,
    'path' => backdrop_get_path('module', 'aggregator'),
  );
}

/**
 * Implements hook_theme().
 */
function aggregator_theme() {
  return array(
    'aggregator_wrapper' => array(
      'variables' => array('content' => NULL),
      'file' => 'aggregator.pages.inc',
      'template' => 'aggregator-wrapper',
    ),
    'aggregator_categorize_items' => array(
      'render element' => 'form',
      'file' => 'aggregator.pages.inc',
    ),
    'aggregator_feed_source' => array(
      'variables' => array('feed' => NULL),
      'file' => 'aggregator.pages.inc',
      'template' => 'aggregator-feed-source',
    ),
    'aggregator_summary_items' => array(
      'variables' => array('summary_items' => NULL, 'source' => NULL),
      'file' => 'aggregator.pages.inc',
      'template' => 'aggregator-summary-items',
    ),
    'aggregator_summary_item' => array(
      'variables' => array('item' => NULL),
      'file' => 'aggregator.pages.inc',
      'template' => 'aggregator-summary-item',
    ),
    'aggregator_item' => array(
      'variables' => array('item' => NULL),
      'file' => 'aggregator.pages.inc',
      'template' => 'aggregator-item',
    ),
    'aggregator_page_opml' => array(
      'variables' => array('feeds' => NULL),
      'file' => 'aggregator.pages.inc',
    ),
    'aggregator_page_rss' => array(
      'variables' => array('feeds' => NULL, 'category' => NULL),
      'file' => 'aggregator.pages.inc',
    ),
  );
}

/**
 * Implements hook_menu().
 */
function aggregator_menu() {
  $items['admin/config/services/aggregator'] = array(
    'title' => 'Feed aggregator',
    'description' => "Configure which content your site aggregates from other sites, how often it polls them, and how they're categorized.",
    'page callback' => 'aggregator_admin_overview',
    'access arguments' => array('administer news feeds'),
    'weight' => 10,
    'file' => 'aggregator.admin.inc',
  );
  $items['admin/config/services/aggregator/add/feed'] = array(
    'title' => 'Add feed',
    'page callback' => 'backdrop_get_form',
    'page arguments' => array('aggregator_form_feed'),
    'access arguments' => array('administer news feeds'),
    'type' => MENU_LOCAL_ACTION,
    'file' => 'aggregator.admin.inc',
  );
  $items['admin/config/services/aggregator/add/category'] = array(
    'title' => 'Add category',
    'page callback' => 'backdrop_get_form',
    'page arguments' => array('aggregator_form_category'),
    'access arguments' => array('administer news feeds'),
    'type' => MENU_LOCAL_ACTION,
    'file' => 'aggregator.admin.inc',
  );
  $items['admin/config/services/aggregator/add/opml'] = array(
    'title' => 'Import OPML',
    'page callback' => 'backdrop_get_form',
    'page arguments' => array('aggregator_form_opml'),
    'access arguments' => array('administer news feeds'),
    'type' => MENU_LOCAL_ACTION,
    'file' => 'aggregator.admin.inc',
  );
  $items['admin/config/services/aggregator/remove/%aggregator_feed'] = array(
    'title' => 'Remove items',
    'page callback' => 'backdrop_get_form',
    'page arguments' => array('aggregator_admin_remove_feed', 5),
    'access arguments' => array('administer news feeds'),
    'file' => 'aggregator.admin.inc',
  );
  $items['admin/config/services/aggregator/update/%aggregator_feed'] = array(
    'title' => 'Update items',
    'page callback' => 'aggregator_admin_refresh_feed',
    'page arguments' => array(5),
    'access arguments' => array('administer news feeds'),
    'file' => 'aggregator.admin.inc',
  );
  $items['admin/config/services/aggregator/list'] = array(
    'title' => 'List',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );
  $items['admin/config/services/aggregator/settings'] = array(
    'title' => 'Settings',
    'description' => 'Configure the behavior of the feed aggregator, including when to discard feed items and how to present feed items and categories.',
    'page callback' => 'backdrop_get_form',
    'page arguments' => array('aggregator_admin_form'),
    'access arguments' => array('administer news feeds'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'aggregator.admin.inc',
  );
  $items['aggregator'] = array(
    'title' => 'Feed aggregator',
    'page callback' => 'aggregator_page_last',
    'access arguments' => array('access news feeds'),
    'weight' => 5,
    'file' => 'aggregator.pages.inc',
  );
  $items['aggregator/sources'] = array(
    'title' => 'Sources',
    'page callback' => 'aggregator_page_sources',
    'access arguments' => array('access news feeds'),
    'file' => 'aggregator.pages.inc',
  );
  $items['aggregator/categories'] = array(
    'title' => 'Categories',
    'page callback' => 'aggregator_page_categories',
    'access callback' => '_aggregator_has_categories',
    'file' => 'aggregator.pages.inc',
  );
  $items['aggregator/rss'] = array(
    'title' => 'RSS feed',
    'page callback' => 'aggregator_page_rss',
    'access arguments' => array('access news feeds'),
    'type' => MENU_CALLBACK,
    'file' => 'aggregator.pages.inc',
  );
  $items['aggregator/opml'] = array(
    'title' => 'OPML feed',
    'page callback' => 'aggregator_page_opml',
    'access arguments' => array('access news feeds'),
    'type' => MENU_CALLBACK,
    'file' => 'aggregator.pages.inc',
  );
  $items['aggregator/categories/%aggregator_category'] = array(
    'title callback' => '_aggregator_category_title',
    'title arguments' => array(2),
    'page callback' => 'aggregator_page_category',
    'page arguments' => array(2),
    'access arguments' => array('access news feeds'),
    'file' => 'aggregator.pages.inc',
  );
  $items['aggregator/categories/%aggregator_category/view'] = array(
    'title' => 'View',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );
  $items['aggregator/categories/%aggregator_category/categorize'] = array(
    'title' => 'Categorize',
    'page callback' => 'backdrop_get_form',
    'page arguments' => array('aggregator_page_category_form', 2),
    'access arguments' => array('administer news feeds'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'aggregator.pages.inc',
  );
  $items['aggregator/categories/%aggregator_category/configure'] = array(
    'title' => 'Configure',
    'page callback' => 'backdrop_get_form',
    'page arguments' => array('aggregator_form_category', 2),
    'access arguments' => array('administer news feeds'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 1,
    'file' => 'aggregator.admin.inc',
  );
  $items['aggregator/sources/%aggregator_feed'] = array(
    'page callback' => 'aggregator_page_source',
    'page arguments' => array(2),
    'access arguments' => array('access news feeds'),
    'file' => 'aggregator.pages.inc',
  );
  $items['aggregator/sources/%aggregator_feed/view'] = array(
    'title' => 'View',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );
  $items['aggregator/sources/%aggregator_feed/categorize'] = array(
    'title' => 'Categorize',
    'page callback' => 'backdrop_get_form',
    'page arguments' => array('aggregator_page_source_form', 2),
    'access arguments' => array('administer news feeds'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'aggregator.pages.inc',
  );
  $items['aggregator/sources/%aggregator_feed/configure'] = array(
    'title' => 'Configure',
    'page callback' => 'backdrop_get_form',
    'page arguments' => array('aggregator_form_feed', 2),
    'access arguments' => array('administer news feeds'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 1,
    'file' => 'aggregator.admin.inc',
  );
  $items['admin/config/services/aggregator/edit/feed/%aggregator_feed'] = array(
    'title' => 'Edit feed',
    'page callback' => 'backdrop_get_form',
    'page arguments' => array('aggregator_form_feed', 6),
    'access arguments' => array('administer news feeds'),
    'file' => 'aggregator.admin.inc',
  );
  $items['admin/config/services/aggregator/edit/category/%aggregator_category'] = array(
    'title' => 'Edit category',
    'page callback' => 'backdrop_get_form',
    'page arguments' => array('aggregator_form_category', 6),
    'access arguments' => array('administer news feeds'),
    'file' => 'aggregator.admin.inc',
  );

  return $items;
}

/**
 * Title callback: Returns a title for aggregator category pages.
 *
 * @param $category
 *   An aggregator category.
 *
 * @return
 *   A string with the aggregator category title.
 */
function _aggregator_category_title($category) {
  return $category['title'];
}

/**
 * Determines whether there are any aggregator categories.
 *
 * @return
 *   TRUE if there is at least one category and the user has access to them;
 *   FALSE otherwise.
 */
function _aggregator_has_categories() {
  return user_access('access news feeds') && (bool) db_query_range('SELECT 1 FROM {aggregator_category}', 0, 1)->fetchField();
}

/**
 * Implements hook_permission().
 */
function aggregator_permission() {
  return array(
    'administer news feeds' => array(
      'title' => t('Administer news feeds'),
    ),
    'access news feeds' => array(
      'title' => t('View news feeds'),
    ),
  );
}

/**
 * Implements hook_cron().
 *
 * Queues news feeds for updates once their refresh interval has elapsed.
 */
function aggregator_cron() {
  $result = db_query('SELECT * FROM {aggregator_feed} WHERE queued = 0 AND checked + refresh < :time AND refresh <> :never', array(
    ':time' => REQUEST_TIME,
    ':never' => AGGREGATOR_CLEAR_NEVER
  ));
  $queue = BackdropQueue::get('aggregator_feeds');
  foreach ($result as $feed) {
    if ($queue->createItem($feed)) {
      // Add timestamp to avoid queueing item more than once.
      db_update('aggregator_feed')
        ->fields(array('queued' => REQUEST_TIME))
        ->condition('fid', $feed->fid)
        ->execute();
    }
  }

  // Remove queued timestamp after 6 hours assuming the update has failed.
  db_update('aggregator_feed')
    ->fields(array('queued' => 0))
    ->condition('queued', REQUEST_TIME - (3600 * 6), '<')
    ->execute();
}

/**
 * Implements hook_cron_queue_info().
 */
function aggregator_cron_queue_info() {
  $queues['aggregator_feeds'] = array(
    'worker callback' => 'aggregator_refresh',
    'time' => 60,
  );
  return $queues;
}

/**
 * Adds/edits/deletes aggregator categories.
 *
 * @param $edit
 *   An associative array describing the category to be added/edited/deleted.
 */
function aggregator_save_category($edit) {
  $link_path = 'aggregator/categories/';
  if (!empty($edit['cid'])) {
    $link_path .= $edit['cid'];
    if (!empty($edit['title'])) {
      db_merge('aggregator_category')
        ->key(array('cid' => $edit['cid']))
        ->fields(array(
          'title' => $edit['title'],
          'description' => $edit['description'],
        ))
        ->execute();
      $op = 'update';
    }
    else {
      db_delete('aggregator_category')
        ->condition('cid', $edit['cid'])
        ->execute();
      $edit['title'] = '';
      $op = 'delete';
    }
  }
  if (isset($op)) {
    menu_link_maintain('aggregator', $op, $link_path, $edit['title']);
  }
}

/**
 * Add/edit/delete an aggregator feed.
 *
 * @param $edit
 *   An associative array describing the feed to be added/edited/deleted.
 */
function aggregator_save_feed($edit) {
  if (!empty($edit['fid'])) {
    // An existing feed is being modified, delete the category listings.
    db_delete('aggregator_category_feed')
      ->condition('fid', $edit['fid'])
      ->execute();
  }
  if (!empty($edit['fid']) && !empty($edit['title'])) {
    db_update('aggregator_feed')
      ->condition('fid', $edit['fid'])
      ->fields(array(
        'title' => $edit['title'],
        'url' => $edit['url'],
        'refresh' => $edit['refresh'],
      ))
      ->execute();
  }
  elseif (!empty($edit['fid'])) {
    $iids = db_query('SELECT iid FROM {aggregator_item} WHERE fid = :fid', array(':fid' => $edit['fid']))->fetchCol();
    if ($iids) {
      db_delete('aggregator_category_item')
        ->condition('iid', $iids, 'IN')
        ->execute();
    }
    db_delete('aggregator_feed')->
      condition('fid', $edit['fid'])
      ->execute();
    db_delete('aggregator_item')
      ->condition('fid', $edit['fid'])
      ->execute();
  }
  elseif (!empty($edit['title'])) {
    $edit['fid'] = db_insert('aggregator_feed')
      ->fields(array(
        'title' => $edit['title'],
        'url' => $edit['url'],
        'refresh' => $edit['refresh'],
        'link' => '',
        'description' => '',
        'image' => '',
      ))
      ->execute();

  }
  if (!empty($edit['title'])) {
    // The feed is being saved, save the categories as well.
    if (!empty($edit['category'])) {
      foreach ($edit['category'] as $cid => $value) {
        if ($value) {
          db_insert('aggregator_category_feed')
            ->fields(array(
              'fid' => $edit['fid'],
              'cid' => $cid,
            ))
            ->execute();
        }
      }
    }
  }
}

/**
 * Removes all items from a feed.
 *
 * @param $feed
 *   An object describing the feed to be cleared.
 */
function aggregator_remove($feed) {
  _aggregator_get_variables();
  // Call hook_aggregator_remove() on all modules.
  module_invoke_all('aggregator_remove', $feed);
  // Reset feed.
  db_update('aggregator_feed')
    ->condition('fid', $feed->fid)
    ->fields(array(
      'checked' => 0,
      'hash' => '',
      'etag' => '',
      'modified' => 0,
    ))
    ->execute();
}

/**
 * Gets the fetcher, parser, and processors.
 *
 * @return
 *   An array containing the fetcher, parser, and processors.
 */
function _aggregator_get_variables() {
  $config = config('aggregator.settings');
  // Fetch the feed.
  $fetcher = $config->get('fetcher');
  if ($fetcher == 'aggregator') {
    include_once BACKDROP_ROOT . '/' . backdrop_get_path('module', 'aggregator') . '/aggregator.fetcher.inc';
  }
  $parser = $config->get('parser');
  if ($parser == 'aggregator') {
    include_once BACKDROP_ROOT . '/' . backdrop_get_path('module', 'aggregator') . '/aggregator.parser.inc';
  }
  $processors = $config->get('processors');
  if (in_array('aggregator', $processors)) {
    include_once BACKDROP_ROOT . '/' . backdrop_get_path('module', 'aggregator') . '/aggregator.processor.inc';
  }
  return array($fetcher, $parser, $processors);
}

/**
 * Checks a news feed for new items.
 *
 * @param $feed
 *   An object describing the feed to be refreshed.
 */
function aggregator_refresh($feed) {
  // Store feed URL to track changes.
  $feed_url = $feed->url;

  // Fetch the feed.
  list($fetcher, $parser, $processors) = _aggregator_get_variables();
  $success = module_invoke($fetcher, 'aggregator_fetch', $feed);

  // We store the hash of feed data in the database. When refreshing a
  // feed we compare stored hash and new hash calculated from downloaded
  // data. If both are equal we say that feed is not updated.
  $hash = hash('sha256', $feed->source_string);

  if ($success && ($feed->hash != $hash)) {
    // Parse the feed.
    if (module_invoke($parser, 'aggregator_parse', $feed)) {
      // Update feed with parsed data.
      db_merge('aggregator_feed')
        ->key(array('fid' => $feed->fid))
        ->fields(array(
          'url' => $feed->url,
          'link' => empty($feed->link) ? $feed->url : $feed->link,
          'description' => empty($feed->description) ? '' : $feed->description,
          'image' => empty($feed->image) ? '' : $feed->image,
          'hash' => $hash,
          'etag' => empty($feed->etag) ? '' : $feed->etag,
          'modified' => empty($feed->modified) ? 0 : $feed->modified,
        ))
        ->execute();

      // Log if feed URL has changed.
      if ($feed->url != $feed_url) {
        watchdog('aggregator', 'Updated URL for feed %title to %url.', array('%title' => $feed->title, '%url' => $feed->url));
      }

      watchdog('aggregator', 'There is new syndicated content from %site.', array('%site' => $feed->title));
      backdrop_set_message(t('There is new syndicated content from %site.', array('%site' => $feed->title)));

      // If there are items on the feed, let all enabled processors do their work on it.
      if (@count($feed->items)) {
        foreach ($processors as $processor) {
          module_invoke($processor, 'aggregator_process', $feed);
        }
      }
    }
  }
  else {
    backdrop_set_message(t('There is no new syndicated content from %site.', array('%site' => $feed->title)));
  }

  // Regardless of successful or not, indicate that this feed has been checked.
  db_update('aggregator_feed')
    ->fields(array('checked' => REQUEST_TIME, 'queued' => 0))
    ->condition('fid', $feed->fid)
    ->execute();

  // Expire old feed items.
  if (function_exists('aggregator_expire')) {
    aggregator_expire($feed);
  }
}

/**
 * Loads an aggregator feed.
 *
 * @param $fid
 *   The feed id.
 *
 * @return
 *   An object describing the feed.
 */
function aggregator_feed_load($fid) {
  $feeds = &backdrop_static(__FUNCTION__);
  if (!isset($feeds[$fid])) {
    $feeds[$fid] = db_query('SELECT * FROM {aggregator_feed} WHERE fid = :fid', array(':fid' => $fid))->fetchObject();
  }

  return $feeds[$fid];
}

/**
 * Loads an aggregator category.
 *
 * @param $cid
 *   The category id.
 *
 * @return
 *   An associative array describing the category.
 */
function aggregator_category_load($cid) {
  $categories = &backdrop_static(__FUNCTION__);
  if (!isset($categories[$cid])) {
    $categories[$cid] = db_query('SELECT * FROM {aggregator_category} WHERE cid = :cid', array(':cid' => $cid))->fetchAssoc();
  }

  return $categories[$cid];
}

/**
 * Renders the HTML content safely, as allowed.
 *
 * @param $value
 *   The content to be filtered.
 *
 * @return
 *   The filtered content.
 */
function aggregator_filter_xss($value) {
  $config = config('aggregator.settings');
  return filter_xss($value, preg_split('/\s+|<|>/', $config->get('allowed_html_tags'), -1, PREG_SPLIT_NO_EMPTY));
}

/**
 * Checks and sanitizes the aggregator configuration.
 *
 * Goes through all fetchers, parsers and processors and checks whether they
 * are available. If one is missing, resets to standard configuration.
 *
 * @return
 *   TRUE if this function resets the configuration; FALSE if not.
 */
function aggregator_sanitize_configuration() {
  $reset = FALSE;
  list($fetcher, $parser, $processors) = _aggregator_get_variables();
  if (!module_exists($fetcher)) {
    $reset = TRUE;
  }
  if (!module_exists($parser)) {
    $reset = TRUE;
  }
  foreach ($processors as $processor) {
    if (!module_exists($processor)) {
      $reset = TRUE;
      break;
    }
  }
  if ($reset) {
    variable_del('aggregator_fetcher');
    variable_del('aggregator_parser');
    variable_del('aggregator_processors');
    return TRUE;
  }
  return FALSE;
}

/**
 * Helper function for backdrop_map_assoc.
 *
 * @param $count
 *   Items count.
 *
 * @return
 *   A string that is plural-formatted as "@count items".
 */
function _aggregator_items($count) {
  return format_plural($count, '1 item', '@count items');
}
